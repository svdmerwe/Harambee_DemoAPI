using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using EFDataAccessLibrary.DataAccess;
using EFDataAccessLibrary.Models;
using EFDataAccessLibrary.Services;

namespace DemoAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        private readonly DemoDataContext _context;
        private readonly IProductProcessor _productProcessor;
        private readonly log4net.ILog log;

        //SVDM - DI used to incject context and IProductProcessor for use in this class.
        public ProductsController(DemoDataContext context, IProductProcessor productProcessor)
        {
            _context = context;
            _productProcessor = productProcessor;
            log = Program.log;
        }

        // GET: api/Products
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Product>>> GetProduct()
        {
            log.Info("api/Products: Executed");
            return await _context.Product.ToListAsync();
        }

        // GET: api/Products/Electronics
        [HttpGet("{category}")]
        public async Task<ActionResult<IEnumerable<Product>>> GetProduct(string category)
        {
            log.Info("api/Products/{category}: Executed");
            //var product = await _context.Product.FindAsync(id);
            var products = await _context.Product.Where(p => p.Category == category).ToListAsync();

            if (products == null)
            {
                log.Error("api/Products/{category}: Product object is null");
                return NotFound();
            }

            return products;
        }

        // POST: api/Products
        [HttpPost]
        public async Task<ActionResult<Product>> PostProduct(Product product)
        {
            try
            {
                log.Info("api/Products - Post: Executed");

                //SVDM - Use DI _productProcessor to validate product object.
                log.Info("api/Products - Post: Validate Products through ProductProcessor Service");
                Product validProduct = _productProcessor.ValidateProduct(product);

                log.Info("api/Products - Post: Save Product to DBContext");
                _context.Product.Add(validProduct);
                await _context.SaveChangesAsync();

                return CreatedAtAction("GetProduct", new { id = product.Id }, product);
            }
            catch (Exception ex)
            {
                log.Error($"api/Products - Post: {ex.Message}");
                return BadRequest(ex.Message);
            }
        }

        #region Code Generated by Scaffolding Tool - Not Needed for Demo
        //// PUT: api/Products/5
        //// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        //[HttpPut("{id}")]
        //public async Task<IActionResult> PutProduct(int id, Product product)
        //{
        //    if (id != product.Id)
        //    {
        //        return BadRequest();
        //    }

        //    _context.Entry(product).State = EntityState.Modified;

        //    try
        //    {
        //        await _context.SaveChangesAsync();
        //    }
        //    catch (DbUpdateConcurrencyException)
        //    {
        //        if (!ProductExists(id))
        //        {
        //            return NotFound();
        //        }
        //        else
        //        {
        //            throw;
        //        }
        //    }

        //    return NoContent();
        //}      

        //// DELETE: api/Products/5
        //[HttpDelete("{id}")]
        //public async Task<IActionResult> DeleteProduct(int id)
        //{
        //    var product = await _context.Product.FindAsync(id);
        //    if (product == null)
        //    {
        //        return NotFound();
        //    }

        //    _context.Product.Remove(product);
        //    await _context.SaveChangesAsync();

        //    return NoContent();
        //}

        //private bool ProductExists(int id)
        //{
        //    return _context.Product.Any(e => e.Id == id);
        //} 
        #endregion
    }
}
